{
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Description"              : "",
    "Resources"                : {
        "ScheduledRule" : {
            "Type" : "AWS::Events::Rule",
            "Properties" : {
                "Description" : "Trigger a Lambda to propogate tags to EBS volumes",
                "ScheduleExpression": "rate(1 hour)",
                "Name"         : "Propogate-Tags-to-EBS-Volumes",
                "State"        : "ENABLED",
                "Targets"      : [
                    {
                        "Arn" : {
                            "Ref" : "ProductionAlias"
                        },
                        "Id"  : "Production"
                    }
                ]
            }
        },
        "CFTagEBS"    : {
            "Type" : "AWS::Lambda::Function",
            "Properties" : {
                "Code" : {
                    "ZipFile" : {
                        "Fn::Join" : [
                            "",
                            [
                                "from __future__ import print_function\n",
                                "import json\n",
                                "import boto3\n",
                                "import logging\n",
                                "import time\n",
                                "import datetime\n",
                                "\n",
                                "logger = logging.getLogger()\n",
                                "logger.setLevel(logging.INFO)\n",
                                "\n",
                                "# get the regions\n",
                                "regions = boto3.session.Session().get_available_regions('ec2')\n",
                                "\n",
                                "# Set this to True if you don't want the function to perform any actions\n",
                                "debugMode = False\n",
                                "\n",
                                "def lambda_handler(event, context):\n",

                                "    for region in regions:\n",
                                "        logger.info('Processing instances in region: ' + str(region))\n",
                                "        ec2 = boto3.resource('ec2', region_name=region)\n",
                                "        #List all EC2 instances\n",
                                "        base = ec2.instances.all()\n",
                                "\n",
                                "        logger.info('regions: ' + str(regions))\n",
                                "\n",
                                "        #loop through the running instances\n",
                                "        for instance in base:\n",
                                "\n",
                                "            #Tag the Volumes\n",
                                "            for vol in instance.volumes.all():\n",
                                "                #logger.info(vol.attachments[0]['Device'])\n",
                                "                if debugMode == True:\n",
                                "                    logger.info('Volume: ' + str(vol))\n",
                                "                    tag_cleanup(instance, vol.tags)\n",
                                "                else:\n",
                                "                    tag = vol.create_tags(Tags=tag_cleanup(instance, vol.tags))\n",
                                "                    logger.info('vol tags:' + str(tag))\n",
                                "\n",
                                "            #Tag the Network Interfaces\n",
                                "            for eni in instance.network_interfaces:\n",
                                "                #logger.info(eni.attachment['DeviceIndex'])\n",
                                "                if debugMode == True:\n",
                                "                    logger.info('eni:' + str(eni))\n",
                                "                    tag_cleanup(instance, eni.tag_set)\n",
                                "                else:\n",
                                "                    tag = eni.create_tags(Tags=tag_cleanup(instance, eni.tag_set))\n",
                                "                    logger.info('eni tag: ' + str(tag))\n",
                                "\n",
                                "#------------- Functions ------------------\n",
                                "#returns the type of configuration that was performed\n",
                                "\n",
                                "def tag_cleanup(instance, currentTags):\n",
                                "    tempTags=[]\n",
                                "    v={}\n",
                                "\n",
                                "    for t in instance.tags:\n",
                                "        if t['Key'].startswith('aws'):\n",
                                "            logger.info('aws tag detected - skipping (' + t['Key'] + ')')\n",
                                "        elif currentTags is not None and t['Key'] == 'Name' and any(tag['Key'] == 'Name' for tag in currentTags):\n",
                                "            logger.info('volume already named - skipping (' + t['Key'] + ')')\n",
                                "        else:\n",
                                "            tempTags.append(t)\n",
                                "\n",
                                "    logger.info('tags to apply:' + str(tempTags))\n",
                                "    return(tempTags)\n"
                            ]
                        ]
                    }
                },
                "Description" : "This function propogates tags to EBS volumes from instances.",
                "Handler"     : "index.lambda_handler",
                "Role"        : {
                    "Fn::GetAtt" : [
                        "LambdaTagEBSRole",
                        "Arn"
                    ]
                },
                "Runtime"     : "python2.7",
                "Timeout"     : "300"
            }
        },
        "StableVersion" : {
            "Type" : "AWS::Lambda::Version",
            "Properties" : {
                "FunctionName" : {
                    "Ref" : "CFTagEBS"
                },
                "Description"  : "Stable version"
            }
        },
        "ProductionAlias" : {
            "Type" : "AWS::Lambda::Alias",
            "Properties" : {
                "FunctionName" : {
                    "Ref" : "CFTagEBS"
                },
                "FunctionVersion" : {
                    "Fn::GetAtt" : [
                        "StableVersion",
                        "Version"
                    ]
                },
                "Name"            : "PROD"
            }
        },
        "PermissionForEventsToInvokeLambda" : {
            "Type" : "AWS::Lambda::Permission",
            "Properties" : {
                "FunctionName" : {
                    "Ref" : "ProductionAlias"
                },
                "Action"       : "lambda:InvokeFunction",
                "Principal"    : "events.amazonaws.com",
                "SourceArn"    : {
                    "Fn::GetAtt" : [
                        "ScheduledRule",
                        "Arn"
                    ]
                }
            }
        },
        "LambdaTagEBSRole"                 : {
            "Type" : "AWS::IAM::Role",
            "Properties" : {
                "AssumeRolePolicyDocument" : {
                    "Version" : "2012-10-17",
                    "Statement" : [
                        {
                            "Effect" : "Allow",
                            "Principal" : {
                                "Service" : [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action"    : [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Policies"                 : [
                    {
                        "PolicyName" : "LambdaAllowTagging",
                        "PolicyDocument" : {
                            "Version" : "2012-10-17",
                            "Statement" : [
                                {
                                    "Sid" : "Stmt1458923097000",
                                    "Effect" : "Allow",
                                    "Action" : [
                                        "cloudtrail:LookupEvents"
                                    ],
                                    "Resource" : [
                                        "*"
                                    ]
                                },
                                {
                                    "Sid" : "Stmt1458923121000",
                                    "Effect" : "Allow",
                                    "Action" : [
                                        "ec2:CreateTags",
                                        "ec2:Describe*",
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource" : [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        }
    },
    "Outputs"                  : {
    }
}
